{"ast":null,"code":"var _jsxFileName = \"/Users/messoudi/Documents/pweb/src/components/form.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Form() {\n  _s();\n  const apiUrl = \"https://api.imgflip.com/get_memes\"; //URL de l'api\n\n  //tableau dans lequel on récuperera tous les memes depuis l'api\n  const [Memes, setMemes] = useState([]);\n\n  //le meme qui s'affichera debutera toujours avec cette image et on initialise les texte en haut et en bas à null\n  const [Image, setImage] = useState({\n    textHaut: \"\",\n    textBas: \"\",\n    image: \"https://i.imgflip.com/145qvv.jpg\"\n  });\n\n  //récuperation des données de l'api, création du tableau memes qui contient tout les memes\n  React.useEffect(() => {\n    async function fetchData() {\n      try {\n        const res = await fetch(apiUrl);\n        if (res.ok) {\n          const data = await res.json();\n          setMemes(data.data.memes);\n        } else {\n          console.error('Echec de la Requete');\n        }\n      } catch (error) {\n        console.error('Erreur ', error);\n      }\n    }\n    fetchData();\n  }, []);\n\n  //Choisit un element au hasard depuis le tableau Memes\n  function getImage() {\n    return Memes[Math.floor(Math.random() * Memes.length)].url;\n  }\n\n  //change l'image du meme au declanchement via le boutton\n  function changeMeme(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    setImage(prevState => ({\n      ...prevState,\n      [name]: value\n    }));\n  }\n  function handleSubmit(event) {\n    event.preventDefault();\n    setImage(prevState => ({\n      ...prevState,\n      image: getImage()\n    }));\n  }\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"form-input\",\n        placeholder: \"Meme top text\",\n        name: \"textHaut\",\n        value: Image.textHaut,\n        onChange: changeMeme\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"form-input\",\n        placeholder: \"Meme bottom text\",\n        name: \"textBas\",\n        value: Image.textBas,\n        onChange: changeMeme\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"form-button\",\n        children: \"Generate Meme\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"meme\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: Image.image,\n        alt: \"meme\",\n        className: \"meme--image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"meme--text top\",\n        children: Image.textHaut\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"meme--text bottom\",\n        children: Image.textBas\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(Form, \"8fUjBhK4XxiLthLX5x8utpUahHU=\");\n_c = Form;\nvar _c;\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Form","_s","apiUrl","Memes","setMemes","Image","setImage","textHaut","textBas","image","useEffect","fetchData","res","fetch","ok","data","json","memes","console","error","getImage","Math","floor","random","length","url","changeMeme","event","name","value","target","prevState","handleSubmit","preventDefault","children","className","onSubmit","type","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","_c","$RefreshReg$"],"sources":["/Users/messoudi/Documents/pweb/src/components/form.js"],"sourcesContent":["import React, { useState } from \"react\";\nexport default function Form() {\n\n  const apiUrl = \"https://api.imgflip.com/get_memes\"; //URL de l'api\n\n  //tableau dans lequel on récuperera tous les memes depuis l'api\n  const [Memes, setMemes] = useState([]);\n\n  //le meme qui s'affichera debutera toujours avec cette image et on initialise les texte en haut et en bas à null\n  const [Image, setImage] = useState({\n    textHaut: \"\",\n    textBas: \"\",\n    image: \"https://i.imgflip.com/145qvv.jpg\",\n  });\n\n  //récuperation des données de l'api, création du tableau memes qui contient tout les memes\n  React.useEffect(() => {\n    async function fetchData() {\n      try {\n        const res = await fetch(apiUrl);\n        if (res.ok) {\n          const data = await res.json();\n          setMemes(data.data.memes);\n        } else {\n          console.error('Echec de la Requete');\n        }\n      } catch (error) {\n        console.error('Erreur ', error);\n      }\n    }\n    fetchData();\n  }, []);\n\n//Choisit un element au hasard depuis le tableau Memes\n  function getImage() {\n      return Memes[Math.floor(Math.random() * Memes.length)].url;\n  }\n  \n\n  //change l'image du meme au declanchement via le boutton\n  function changeMeme(event) {\n    const { name, value } = event.target;\n    setImage((prevState) => ({\n      ...prevState,\n      [name]: value,\n    }));\n  }\n\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    setImage((prevState) => ({\n      ...prevState,\n      image: getImage(),\n    }));\n  }\n\n  return (\n    <main>\n      <form className=\"form\" onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          className=\"form-input\"\n          placeholder=\"Meme top text\"\n          name=\"textHaut\"\n          value={Image.textHaut}\n          onChange={changeMeme}\n        />\n        <input\n          type=\"text\"\n          className=\"form-input\"\n          placeholder=\"Meme bottom text\"\n          name=\"textBas\"\n          value={Image.textBas}\n          onChange={changeMeme}\n        />\n        <button className=\"form-button\">Generate Meme</button>\n      </form>\n      <div className=\"meme\">\n        <img src={Image.image} alt=\"meme\" className=\"meme--image\" />\n        <h1 className=\"meme--text top\">{Image.textHaut}</h1>\n        <h1 className=\"meme--text bottom\">{Image.textBas}</h1>\n      </div>\n    </main>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}